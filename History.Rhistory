if(file.exists(file.path(dir_current,"processing_waveforms","Paracou.metric.txt"))) file.remove(file.path(dir_current,"processing_waveforms","Paracou.metric.txt"))
wf_pointcloud <-  gediWFSimulator(input = normalizePath(file.path(dir_current,
"processing_waveforms",
"Paracou_2016_Plots_Buff25m_Norm.las")),
output = paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_simulation.h5"),
listCoord = normalizePath(file.path(dir_current,"processing_waveforms","list_coords_Paracou.txt")),
maxScanAng = 20,checkCover = TRUE)
wf_Paracou_metrics<-gediWFMetrics(input=wf_pointcloud,
outRoot=normalizePath(file.path(dir_current,
"processing_waveforms",
"Paracou")))
close(wf_pointcloud)
rm(wf_pointcloud)
if(file.exists(file.path(dir_current,"processing_waveforms","gediWF_simulation.h5"))) file.remove(file.path(dir_current,"processing_waveforms","gediWF_simulation.h5"))
colnames(wf_Paracou_metrics) <- gsub(colnames(wf_Paracou_metrics),pattern = " ",replacement = "_")
wf_Paracou_metrics$true_ground <- wf_Paracou_metrics$ground_slope <- 0
readr::write_tsv(wf_Paracou_metrics, file.path(dir_current,"processing_waveforms","Paracou_metric.tsv"))
rm(wf_Paracou_metrics)
dir_current <-"~/BETA/backup/Data"
wf_Paracou_metrics <- readr::read_tsv(normalizePath(file.path(dir_current,"processing_waveforms","Paracou_metric.tsv"))) |>
separate(col = wave_ID, into = c("Plot","waveID_Plot"),remove = FALSE) |> mutate(Plot = as.numeric(Plot), waveID_Plot = as.numeric(waveID_Plot))
coord_carre_parcelle_paracou <- readxl::read_excel("~/Nextcloud/Model/TROLL/Paracou_posterior/coord_carre_parcelle_paracou.xlsx")
colnames(coord_carre_parcelle_paracou) <- gsub(colnames(coord_carre_parcelle_paracou),pattern = " ",replacement = "_")
load("~/Nextcloud/Model/TROLL/Paracou_posterior/trees_basic_withcoord.RData")
trees_basic <- trees_basic_withcoord |>
left_join(coord_carre_parcelle_paracou |>
rowwise() |>
mutate(Xrel_plot = min(no_x,ne_x,so_x,se_x),
Yrel_plot = min(no_y,ne_y,so_y,se_y)) |>
select(Parc,Xrel_plot,Yrel_plot),
by = c("plot_code" = "Parc")) |>
mutate(Xrel = abs(Xutm - Xrel_plot),
Yrel = abs(Yutm - Yrel_plot))
X_corr <- floor((lm(data = trees_basic |> mutate(plot_code = factor(plot_code)), x ~ Xrel + plot_code) |> summary())$coefficients[,1])
Y_corr <- floor((lm(data = trees_basic |> mutate(plot_code = factor(plot_code)), y ~ Yrel + plot_code) |> summary())$coefficients[,1])
coords_CC <- wf_Paracou_metrics |> select(Plot) |>
distinct() |> arrange(Plot) |>
left_join(coord_carre_parcelle_paracou |>
rowwise() |>
mutate(Xrel_plot = min(no_x,ne_x,so_x,se_x),
Yrel_plot = min(no_y,ne_y,so_y,se_y),
n_row = max(ne_x,no_x,se_x,so_x) - min(ne_x,no_x,se_x,so_x),
n_col = max(ne_y,no_y,se_y,so_y) - min(ne_y,no_y,se_y,so_y)) |>
select(Parc,Xrel_plot,Yrel_plot,n_row,n_col), by = c("Plot" = "Parc")) |>
mutate(X_CC = c(abs(X_corr[1]),abs(X_corr[1]) + X_corr[3:16]),
Y_CC = c(abs(Y_corr[1]),abs(Y_corr[1]) + Y_corr[3:16]))
Rel_coords_CC <- wf_Paracou_metrics |> select(wave_ID, Plot,waveID_Plot,lat,lon) |>
left_join(coords_CC, by = "Plot") |>
mutate(x_rel =  lon - Xrel_plot + X_CC,
y_rel = lat - Yrel_plot + Y_CC) |>
select(wave_ID, Plot,waveID_Plot,x_rel,y_rel) |>
ungroup()
param <- colnames(get_forest(TROLLv3_output))
WIP_CC_data <- trees_basic_withcoord |> filter(paramID == 2065)
Forest_CC <-  as_tibble(matrix(NA,nrow = dim(WIP_CC_data)[1],
ncol = length(param)))
colnames(Forest_CC) <- param
Forest_CC$col <- WIP_CC_data$x ; Forest_CC$row <- WIP_CC_data$y ; Forest_CC$CR <- WIP_CC_data$CR ; Forest_CC$CrownDisplacement <- 0 ;
Forest_CC$height <- WIP_CC_data$height ; Forest_CC$s_name <- WIP_CC_data$species ; Forest_CC$CD <- WIP_CC_data$height * 0.2 ;
Forest_CC$Pmass <- mean(TROLLv3_species$s_Pmass) ; Forest_CC$Nmass <- mean(TROLLv3_species$s_Nmass) ;
Forest_CC$LMA <- mean(TROLLv3_species$s_LMA) ; Forest_CC$wsg <- mean(TROLLv3_species$s_wsg) ;
Forest_CC$dbhmax <- mean(TROLLv3_species$s_dbhmax); Forest_CC$hmax <- mean(TROLLv3_species$s_hmax) ;
Forest_CC$dbh <- WIP_CC_data$dbh
Forest_CC <- Forest_CC |>  select( col , row , s_name , CrownDisplacement , Pmass , Nmass , LMA , wsg , Rdark , Vcmax , Jmax , leaflifespan , lambda_young , lambda_mature , lambda_old , dbhmature , dbhmax , hmax , ah , Ct , LAImax , fraction_filled , mult_height , mult_CR , mult_CD , mult_P , mult_N , mult_LMA , mult_dbhmax , dev_wsg , age , dbh , sapwood_area , height , CD , CR , GPP , NPP , Rday , Rnight , Rstem , LAmax , LA , youngLA , matureLA , oldLA , LAI , litter , carbon_storage , carbon_biometry , multiplier_seed , hurt , NPPneg )
Forest_CC <- as.data.frame(Forest_CC)
sim_CC <- troll(name = "test",path = getwd(),
global = generate_parameters(cols = as.numeric(max(Forest_CC$col)+9), rows = as.numeric(max(Forest_CC$row)+11),
iterperyear = 12, nbiter = 6),
species = TROLLv3_species,
climate = TROLLv3_climatedaytime12,
daily = TROLLv3_daytimevar,
lidar = generate_lidar(mean_beam_pc = 70,
sd_beam_pc = 35,
klaser_pc = 0.63,
transmittance_laser = 0.01,
iter_pointcloud_generation = 1),
forest = Forest_CC,
verbose = FALSE)
# information to read in file
dir_current = sim_CC@path
dir.create(file.path(dir_current,"processing_waveforms"))
write.table(Rel_coords_CC|>
rename("X" = "x_rel", "Y" = "y_rel") |>
select(X,Y,wave_ID), file = file.path(dir_current,"processing_waveforms","list_coords_Paracou_sim.txt"),
row.names = FALSE,col.names = FALSE)
file_pointcloud_lidR = file.path(dir_current,"test_0.las")
pointcloud_CC <- readLAS(file_pointcloud_lidR)
projection(pointcloud_CC) <- "EPSG:32622"
writeLAS(filter_poi(pointcloud_CC, Z > 5),file.path(dir_current,"processing_waveforms","test_0.las"))
thr <- c(0,2,5,10,15)
edg <- c(0, 1.5)
chm <- rasterize_canopy(pointcloud_CC, 1, pitfree(thr, edg))
plot(chm)
if(file.exists(file.path(dir_current,"processing_waveforms","gediWF_simulation.h5"))) file.remove(file.path(dir_current,"processing_waveforms","gediWF_simulation.h5"))
if(file.exists(file.path(dir_current,"processing_waveforms","Paracou.metric.txt"))) file.remove(file.path(dir_current,"processing_waveforms","Paracou.metric.txt"))
wf_pointcloud <-  gediWFSimulator(input = normalizePath(file.path(dir_current,"processing_waveforms","test_0.las")),
output = paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_CC.h5"),
listCoord = normalizePath(file.path(dir_current,
"processing_waveforms",
"list_coords_Paracou_sim.txt")))
wf_Paracou_metrics<-gediWFMetrics(input=wf_pointcloud,
outRoot=normalizePath(file.path(dir_current,
"processing_waveforms",
"Paracou")))
close(wf_pointcloud)
rm(wf_pointcloud)
if(file.exists(file.path(dir_current,"processing_waveforms","gediWF_simulation.h5"))) file.remove(file.path(dir_current,"processing_waveforms","gediWF_simulation.h5"))
colnames(wf_Paracou_metrics) <- gsub(colnames(wf_Paracou_metrics),pattern = " ",replacement = "_")
wf_Paracou_metrics$true_ground <- wf_Paracou_metrics$ground_slope <- 0
readr::write_tsv(wf_Paracou_metrics, file.path(dir_current,"processing_waveforms","Paracou_CC_metric.tsv"))
rm(wf_Paracou_metrics)
rm(list = ls())
gc()
gc()
Paracou_CC_metric <- read.delim("~/Nextcloud/Model/TROLL/rcontroll/vignettes/test/processing_waveforms/Paracou_CC_metric.tsv")
View(Paracou_CC_metric)
Paracou_metric <- read.delim("~/BETA/backup/Data/processing_waveforms/Paracou_metric.tsv")
View(Paracou_metric)
plot(Paracou_CC_metric$true_top,Paracou_metric$true_top)
cor(Paracou_CC_metric$true_top,Paracou_metric$true_top)
cor(Paracou_CC_metric$true_top,Paracou_metric$true_top)^2
plot(Paracou_CC_metric$FHD,Paracou_metric$FHD)
plot(Paracou_CC_metric$cover,Paracou_metric$cover)
plot(Paracou_CC_metric$rhGauss_95,Paracou_metric$rhGauss_95)
?gediWFMetrics
Paracou_metric$rhReal_45
?gediWFSimulator
hdf5r::h5file(paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_simulation.h5"))
dir_current <-"~/BETA/backup/Data"
hdf5r::h5file(paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_simulation.h5"))
testH5 <- hdf5r::h5file(paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_simulation.h5"))
testH5 <- hdf5r::readDataSet(paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_simulation.h5"))
testH5 <- hdf5r::list.datasets(paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_simulation.h5"))
hdf5r::list.datasets(paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_simulation.h5"))
paste0(normalizePath(file.path(dir_current,
+                                              "processing_waveforms")),
+                      "/gediWF_simulation.h5")
paste0(normalizePath(file.path(dir_current,"processing_waveforms")),"/gediWF_simulation.h5")
hdf5r::list.datasets( paste0(normalizePath(file.path(dir_current,"processing_waveforms")),"/gediWF_simulation.h5"))
hdf5r::h5file( paste0(normalizePath(file.path(dir_current,"processing_waveforms")),"/gediWF_simulation.h5"))
testH5 <- hdf5r::h5file(paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_simulation.h5"))
hdf5r::flatten_df(testH5 )
hdf5r::list.datasets(testH5 )
hdf5r::h5attr(testH5 )
testH5$file_info()
testH5$methods()
testH5$ls()
install.packages("ncdf4")
ncdf4::nc_open(paste0(normalizePath(file.path(dir_current,
"processing_waveforms")),
"/gediWF_simulation.h5"))
install.packages("netcdf")
hdf5r::guess_dim(testH5 )
hdf5r::list.objects(testH5 )
hdf5r::list.attributes(testH5 )
hdf5r::list.datasets(testH5 )
testH5$attr_get_number()
testH5$get_obj_ids()
testH5$filename
testH5$file_info()
testH5$print()
testH5
testH5$methods()
testH5$close_all()
install.packages("rhdf5")
install.packages("BiocManager")
BiocManager::install("rhdf5")
Xrd <- lhs::maximinLHS(n = 500, k = 2,verbose = TRUE)
pairsXrd
pairs(Xrd)
Xrd <- lhs::maximinLHS(n = 500, k = 2)
pairs(Xrd)
Calib_lidar_tests <- read.delim("~/Documents/Calib_lidar/Calib_lidar_tests.tsv")
View(Calib_lidar_tests)
pairs(Calib_lidar_tests[,1:2])
gc()
gc()
ibrary(sensobol)
library(sensobol)
library(hetGP)
library(ggraph)
library(GGally)
set.seed(42)
load("~/Nextcloud/Model/TROLL/datasets/rcontrollTROLL_calib_1000x10LHS_600y.rda")
N <- 2^10
k <- 8
params <- calib_dataset$params[c(1:9,11:13)]
R <- 10^3
type <- "percent"
first <- total <- "azzini"
conf <- 0.95
order <- "second"
matrices <- c("A", "B", "AB", "BA")
mat <- sobol_matrices(matrices = matrices, N = N, params = params,
order = order, type = "LHS")
X <- cbind(mat[,1:9],
matrix(0.5,nrow =dim(mat)[1],ncol = 1),
mat[,10:12],
matrix(0.5,nrow =dim(mat)[1],ncol = 2))
Y <- matrix(c(scale(predict(calib_dataset$GPmodels$MeanAgb$mod.MeanAgb,X)$mean),
scale(predict(calib_dataset$GPmodels$MeanSum10$mod.MeanSum10,X)$mean),
scale(predict(calib_dataset$GPmodels$MeanSum30$mod.MeanSum30,X)$mean),
scale(predict(calib_dataset$GPmodels$MeanGpp$mod.MeanGpp,X)$mean)),
ncol = 4, byrow = FALSE)
ind <- sobol_indices(matrices = matrices, Y = Y[,4], N = N, params = params,
first = first, total = total, order = order, boot = TRUE,
R = R,
parallel = "no", type = type, conf = conf)
ind.dummy <- sobol_dummy(Y = Y[,4], N = N, params = params, boot = TRUE,
R = R)
cols <- colnames(ind$results)[1:5]
ind$results[, (cols) := round(.SD, 3), .SDcols = (cols)]
val_sens <- ind$results |>
as_tibble() |>
mutate(param_sens = sub(pattern = '\u002E',replacement = " ",x = parameters,fixed = TRUE)) |>
separate(param_sens, into = c("from","to"),fill = "right",remove = TRUE,sep = "\\s") |>
mutate(sig = if_else(low.ci > 0 | sensitivity != "Sij", TRUE,FALSE),
original = if_else(original<=0, 0, original))
library(tidyverse)
cols <- colnames(ind$results)[1:5]
ind$results[, (cols) := round(.SD, 3), .SDcols = (cols)]
val_sens <- ind$results |>
as_tibble() |>
mutate(param_sens = sub(pattern = '\u002E',replacement = " ",x = parameters,fixed = TRUE)) |>
separate(param_sens, into = c("from","to"),fill = "right",remove = TRUE,sep = "\\s") |>
mutate(sig = if_else(low.ci > 0 | sensitivity != "Sij", TRUE,FALSE),
original = if_else(original<=0, 0, original))
val_sens$original[val_sens$sig == FALSE] <- NA
ST_sens <- val_sens |> as_tibble() |>
dplyr::select(original,parameters,sensitivity) |>
filter(sensitivity != "Sij") |>
mutate(parameter_i = recode(parameters,
"m" = "m[0]",
"CR_a" = "CR[a]",
"phi" = "Phi",
"fallocwood" = "f[wood]",
"falloccanopy" = "f[canopy]",
"klight" = "k",
"vC" = "v[C]",
"Cseedrain" = "seedrain",
"CR_b" = "CR[b]",
"log10nbs0" = "n[s]",
"g1" = "g[1]",
"m1" = "wsg[lim]"
),type = as.factor(recode(parameters,
"m" = "Mortality",
"CR_a" = "Crown allometry",
"phi" = "Leaf ecophysiology",
"fallocwood" = "Carbon allocation",
"falloccanopy" = "Carbon allocation",
"klight" = "Leaf ecophysiology",
"vC" = "Mortality",
"Cseedrain" = "Reproduction",
"CR_b" = "Crown allometry",
"log10nbs0" = "Reproduction",
"g1" = "Leaf ecophysiology",
"m1" = "Mortality"
))) |> spread(key = sensitivity, value = original)
graph_sens <- val_sens |> filter(sensitivity == "Sij") |>
select(from,to,original,sig) |>
rename(weight = original) |>
tidygraph::as_tbl_graph() |>
left_join(ST_sens, by = c("name" = "parameters")) |>
mutate(Si_dummy = ind.dummy$original[1],
Ti_dummy = ind.dummy$original[2],
sobol = paste0("Si: ", ifelse(is.na(Si*100),0,if_else(Si > Si_dummy, paste0(Si*100,"*"), paste0(Si*100)) ),
" %\n","Ti: ", ifelse(is.na(Ti*100),0,if_else(Ti > Ti_dummy, paste0(Ti*100,"*"), paste0(Ti*100)) )," %"),) |>
arrange(type)
# plot_scatter(data = mat, N = N, Y = Y[,1], params = params, method = "bin")
# plot(ind, dummy = ind.dummy)
ply <- ggraph(graph_sens, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(width  = weight*100),alpha = 0.65) +
geom_node_point(shape = 21, aes(size = Ti*100), fill = "black") +
geom_node_point(shape = 21, aes(size = Si*100,fill = type )) +
theme_graph() + theme(legend.position="right",legend.box = "vertical")+
scale_size(range = c(0,10),name = "1st (Si) & Total (Ti)\nSobol indices (%)") +
scale_edge_width_continuous(range = c(0.1,3),name = "2nd (Sij)\nSobol indices (%)") +
scale_fill_grey(start = 0.6,end = 1,name = "Processus\ntype") +
scale_edge_radius(range = c(0,10)) +
coord_fixed(xlim = c(-1.4, 1.4), ylim = c(-1.4, 1.4)) +
ggtitle("Variance-based analysis of TROLL model","Variable of interest : GPP")
ply + geom_node_text(aes(label = parameter_i),nudge_x = ply$data$x * 0.32, nudge_y = ply$data$y * 0.32,
parse = TRUE,size = 6,check_overlap = FALSE) +
geom_node_text(aes(label = sobol),parse = FALSE,
nudge_x = ply$data$x * 0.32 , nudge_y = ply$data$y * 0.32-0.15,
size = 4,check_overlap = FALSE)
ind <- sobol_indices(matrices = matrices, Y = Y[,3], N = N, params = params,
first = first, total = total, order = order, boot = TRUE,
R = R,
parallel = "no", type = type, conf = conf)
ind.dummy <- sobol_dummy(Y = Y[,3], N = N, params = params, boot = TRUE,
R = R)
cols <- colnames(ind$results)[1:5]
ind$results[, (cols) := round(.SD, 3), .SDcols = (cols)]
val_sens <- ind$results |>
as_tibble() |>
mutate(param_sens = sub(pattern = '\u002E',replacement = " ",x = parameters,fixed = TRUE)) |>
separate(param_sens, into = c("from","to"),fill = "right",remove = TRUE,sep = "\\s") |>
mutate(sig = if_else(low.ci > 0 | sensitivity != "Sij", TRUE,FALSE),
original = if_else(original<=0, 0, original))
val_sens$original[val_sens$sig == FALSE] <- NA
ST_sens <- val_sens |> as_tibble() |>
dplyr::select(original,parameters,sensitivity) |>
filter(sensitivity != "Sij") |>
mutate(parameter_i = recode(parameters,
"m" = "m[0]",
"CR_a" = "CR[a]",
"phi" = "Phi",
"fallocwood" = "f[wood]",
"falloccanopy" = "f[canopy]",
"klight" = "k",
"vC" = "v[C]",
"Cseedrain" = "seedrain",
"CR_b" = "CR[b]",
"log10nbs0" = "n[s]",
"g1" = "g[1]",
"m1" = "wsg[lim]"
),type = as.factor(recode(parameters,
"m" = "Mortality",
"CR_a" = "Crown allometry",
"phi" = "Leaf ecophysiology",
"fallocwood" = "Carbon allocation",
"falloccanopy" = "Carbon allocation",
"klight" = "Leaf ecophysiology",
"vC" = "Mortality",
"Cseedrain" = "Reproduction",
"CR_b" = "Crown allometry",
"log10nbs0" = "Reproduction",
"g1" = "Leaf ecophysiology",
"m1" = "Mortality"
))) |> spread(key = sensitivity, value = original)
graph_sens <- val_sens |> filter(sensitivity == "Sij") |>
select(from,to,original,sig) |>
rename(weight = original) |>
tidygraph::as_tbl_graph() |>
left_join(ST_sens, by = c("name" = "parameters")) |>
mutate(Si_dummy = ind.dummy$original[1],
Ti_dummy = ind.dummy$original[2],
sobol = paste0("Si: ", ifelse(is.na(Si*100),0,if_else(Si > Si_dummy, paste0(Si*100,"*"), paste0(Si*100)) ),
" %\n","Ti: ", ifelse(is.na(Ti*100),0,if_else(Ti > Ti_dummy, paste0(Ti*100,"*"), paste0(Ti*100)) )," %"),) |>
arrange(type)
# plot_scatter(data = mat, N = N, Y = Y[,1], params = params, method = "bin")
# plot(ind, dummy = ind.dummy)
ply <- ggraph(graph_sens, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(width  = weight*100),alpha = 0.65) +
geom_node_point(shape = 21, aes(size = Ti*100), fill = "black") +
geom_node_point(shape = 21, aes(size = Si*100,fill = type )) +
theme_graph() + theme(legend.position="right",legend.box = "vertical")+
scale_size(range = c(0,10),name = "1st (Si) & Total (Ti)\nSobol indices (%)") +
scale_edge_width_continuous(range = c(0.1,3),name = "2nd (Sij)\nSobol indices (%)") +
scale_fill_grey(start = 0.6,end = 1,name = "Processus\ntype") +
scale_edge_radius(range = c(0,10)) +
coord_fixed(xlim = c(-1.4, 1.4), ylim = c(-1.4, 1.4)) +
ggtitle("Variance-based analysis of TROLL model","Variable of interest : N30")
ply + geom_node_text(aes(label = parameter_i),nudge_x = ply$data$x * 0.32, nudge_y = ply$data$y * 0.32,
parse = TRUE,size = 6,check_overlap = FALSE) +
geom_node_text(aes(label = sobol),parse = FALSE,
nudge_x = ply$data$x * 0.32 , nudge_y = ply$data$y * 0.32-0.15,
size = 4,check_overlap = FALSE)
graph_ply <- ply + geom_node_text(aes(label = parameter_i),nudge_x = ply$data$x * 0.32, nudge_y = ply$data$y * 0.32,
parse = TRUE,size = 6,check_overlap = FALSE) +
geom_node_text(aes(label = sobol),parse = FALSE,
nudge_x = ply$data$x * 0.32 , nudge_y = ply$data$y * 0.32-0.15,
size = 4,check_overlap = FALSE)
ggsave(graph_ply,filename = "./graph_sens_N30.png",height = 10,width = 10,dpi = 300,device = "png")
ggsave(graph_ply,filename = "graph_sens_N30.png",height = 10,width = 10,dpi = 300,device = "png")
graph_ply <- ply + geom_node_text(aes(label = parameter_i),nudge_x = ply$data$x * 0.33, nudge_y = ply$data$y * 0.33,
parse = TRUE,size = 6,check_overlap = FALSE) +
geom_node_text(aes(label = sobol),parse = FALSE,
nudge_x = ply$data$x * 0.33 , nudge_y = ply$data$y * 0.33-0.15,
size = 4,check_overlap = FALSE)
ggsave(graph_ply,filename = "graph_sens_N30.png",height = 10,width = 10,dpi = 300,device = "png")
graph_ply <- ply + geom_node_text(aes(label = parameter_i),nudge_x = ply$data$x * 0.32, nudge_y = ply$data$y * 0.32,
parse = TRUE,size = 6,check_overlap = FALSE) +
geom_node_text(aes(label = sobol),parse = FALSE,
nudge_x = ply$data$x * 0.33 , nudge_y = ply$data$y * 0.33-0.15,
size = 4,check_overlap = FALSE)
ggsave(graph_ply,filename = "graph_sens_N30.png",height = 10,width = 10,dpi = 300,device = "png")
library(tidyverse)
library(kableExtra)
library(rcontroll)
library(tidyverse)
library(raster)
library(doSNOW)
library(kableExtra)
parameters <- c("klight","phi","g1","fallocwood","falloccanopy","m","vC","Cseedrain","log10nbs0","CR_a","CR_b","m1")
lower <- c(0.5,4E-2,2,1E-2,1E-2,1E-2,1E-2,1E2,0,1.5,0.4,1)
upper = c(0.95,9E-2,5,1,1,0.05,0.15,1E5,3,3,0.8,1.2)
global_parameters_boundaries <- data.frame("parameter" = parameters,"lower" = lower,
"upper" = upper)
global_parameters_boundaries %>%
kbl(caption = "a priori ranges of parameters and correction factor") %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "float_right")
library(hetGP)
load("~/Nextcloud/Model/TROLL/datasets/rcontrollTROLL_calib_1000x10LHS_600y.rda")
plot(calib_dataset$GPmodels$MeanGpp$mod.MeanGpp)
library(sensitivity)
library(dplyr)
library(hetGP)
load("~/Nextcloud/Model/TROLL/datasets/rcontrollTROLL_calib_1000x10LHS_600y.rda")
set.seed(42)
morrisOut <- morris(
model = NULL,
factors = calib_dataset$params[c(1:9,11:13)],
r = 100,
design = list(type = "oat", levels = 20, grid.jump = 3),
binf = 0.33,
bsup = 0.66,
scale = FALSE)
X <- cbind(morrisOut[['X']][,1:9],
matrix(0.5,nrow =dim(morrisOut[['X']])[1],ncol = 1),
morrisOut[['X']][,10:12],
matrix(0.5,nrow =dim(morrisOut[['X']])[1],ncol = 2))
Y <- matrix(c(scale(predict(calib_dataset$GPmodels$MeanAgb$mod.MeanAgb,X)$mean),
scale(predict(calib_dataset$GPmodels$MeanSum10$mod.MeanSum10,X)$mean),
scale(predict(calib_dataset$GPmodels$MeanSum30$mod.MeanSum30,X)$mean),
scale(predict(calib_dataset$GPmodels$MeanGpp$mod.MeanGpp,X)$mean)),
ncol = 4, byrow = FALSE)
tell(morrisOut,Y)
# summarise the moris output
morrisOut.df <- data.frame(
parameter = calib_dataset$params[c(1:9,11:13)],
mu.star = apply(abs(morrisOut$ee), 2, mean, na.rm = T),
sigma = apply(morrisOut$ee, 2, sd, na.rm = T)) |>
arrange( mu.star )
library(tidyverse)
library(ggrepel)
library(grid)
Morris_fig <- morrisOut.df|> as_tibble() |>
mutate(parameter_i = recode(parameter,
"m" = "m[0]",
"CR_a" = "CR[a]",
"phi" = "Phi",
"fallocwood" = "f[wood]",
"falloccanopy" = "f[canopy]",
"klight" = "k",
"vC" = "v[C]",
"Cseedrain" = "seedrain",
"CR_b" = "CR[b]",
"log10nbs0" = "n[s]",
"g1" = "g[1]",
"m1" = "wsg[lim]"
),
type = factor(recode(parameter,
"m" = "Mortality",
"CR_a" = "Crown allometry",
"phi" = "Leaf ecophysiology",
"fallocwood" = "Carbon allocation",
"falloccanopy" = "Carbon allocation",
"klight" = "Leaf ecophysiology",
"vC" = "Mortality",
"Cseedrain" = "Reproduction",
"CR_b" = "Crown allometry",
"log10nbs0" = "Reproduction",
"g1" = "Leaf ecophysiology",
"m1" = "Mortality"
))) |> dplyr::select(-parameter) |>
rename(parameter = parameter_i) |>
ggplot(aes(x = mu.star, y = sigma))+
geom_abline(slope = 1,intercept = 0, linetype = "solid", color = "grey50") +
geom_abline(slope = 0.1,intercept = 0, linetype = "twodash", color = "grey50") +
geom_abline(slope = 0.5,intercept = 0, linetype = "dashed", color = "grey50") +
annotate(
geom = "text", x = 2.25, y = 4.8,
label = "Non-linear and/ or \n  interactions", hjust = 0, vjust = 1, size = 5, color = "grey50") +
annotate(
geom = "text", x = 3.75, y = 3.2,
label = "  Almost\nmonotonic", hjust = 0, vjust = 1, size = 5, color = "grey50") +
annotate(
geom = "text", x = 4.5, y = 1.5,
label = "Monotonic", hjust = 0, vjust = 1, size = 5, color = "grey50") +
annotate(
geom = "text", x = 5.3, y = 0.3,
label = "Linear", hjust = 0, vjust = 1, size = 5, color = "grey50") +
geom_point(size = 2) +
geom_label_repel(aes(label = parameter,fill = type), color = "black",parse = TRUE, size = 4.5,
box.padding = unit(0.7, "lines"),
point.padding = unit(0.7, "lines"),show.legend = FALSE, direction = "both",min.segment.length = 0.1) +
scale_fill_grey(start = 0.6,end = 1) +
ylim(0.1,NA) + xlim(0.1,NA) +
labs( x = expression(Absolute~mean~of~elementary~effect ~ mu * "*" ~(unitless)),
y = expression(Variance~of~elementary~effect~sigma~(unitless))) +
theme_bw()+
theme(text = element_text(size = 14))
ggsave(Morris_fig,"Morris_fig.png",device = "png",width = 10,height = 10,dpi = 300)
Morris_fig
ggsave(Morris_fig,"Morris_fig.png",device = "png",width = 10,height = 10,dpi = 300)
ggsave(plot = Morris_fig,path = "Morris_fig.png",device = "png",width = 10,height = 10,dpi = 300)
ggsave(plot = Morris_fig,filename = "Morris_fig.png",device = "png",width = 10,height = 10,dpi = 300)
calib_dataset$GPmodels$MeanGpp$mod.MeanGpp$Z
Plt <- plot(calib_dataset$GPmodels$MeanGpp$mod.MeanGpp)
Plt$rect
Plt$text
savehistory("~/Nextcloud/Model/TROLL/rcontroll/History.Rhistory")
